@page "/WebPages/edit"
@attribute [Authorize]

@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Redigera Webbsida</PageTitle>

<h1>Redigera webbsida</h1>

<h4>Webbsida</h4>
<hr />
@if (WebPage is null)
{
    <p><em>Laddar...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="WebPage" OnValidSubmit="UpdateWebPage" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="WebPage.WebPageId" value="@WebPage.WebPageId" />
                <div class="mb-3">
                    <label for="websiteid" class="form-label">WebSiteId:</label>
                    <InputNumber id="websiteid" @bind-Value="WebPage.WebSiteId" class="form-control" />
                    <ValidationMessage For="() => WebPage.WebSiteId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="title" class="form-label">Titel:</label>
                    <InputText id="title" @bind-Value="WebPage.Title" class="form-control" />
                    <ValidationMessage For="() => WebPage.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Beskrivning:</label>
                    <InputText id="description" @bind-Value="WebPage.Description" class="form-control" />
                    <ValidationMessage For="() => WebPage.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="creationdate" class="form-label">Skapad:</label>
                    <InputDate id="creationdate" @bind-Value="WebPage.CreationDate" class="form-control" readonly />
                    <ValidationMessage For="() => WebPage.CreationDate" class="text-danger" />
                </div>
                @* If the webpage has had no update yet then the form wont show *@
                @if (LastUpdatedDateTime.HasValue)
                {
                    <div class="mb-3">
                        <label for="lastupdated" class="form-label">Senast uppdaterad:</label>
                        <InputDate id="lastupdated" @bind-Value="LastUpdatedDateTime" class="form-control" readonly />
                        <ValidationMessage For="() => WebPage.LastUpdated" class="text-danger" />
                    </div>
                }
                <div class="mb-3">
                    <label for="visitor-url" class="form-label">Besöks Url:</label>
                    <InputText id="visitor-url" @bind-Value="WebPage.VisitorUrl" class="form-control" />
                    <ValidationMessage For="() => WebPage.VisitorUrl" class="text-danger" />
                </div>
                @* Had to keep this in order for DOM to work but made it invisible to user *@
                <div class="mb-3" style="display: none;">
                    <label for="userid" class="form-label">Användar Id:</label>
                    <InputText id="userid" @bind-Value="WebPage.UserId" class="form-control" />
                    <ValidationMessage For="() => WebPage.UserId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Spara</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/webpages">Tillbaka</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int WebPageId { get; set; }

    [SupplyParameterFromForm]
    public WebPage? WebPage { get; set; }

    private DateTime? LastUpdatedDateTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        WebPage ??= await context.WebPages.FirstOrDefaultAsync(m => m.WebPageId == WebPageId);

        if (WebPage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            // Bindings cant work with DateOnly so converting it to DateTime then back again in UpdateWebSite() function
            LastUpdatedDateTime = WebPage.LastUpdated.HasValue
                ? WebPage.LastUpdated.Value.ToDateTime(TimeOnly.MinValue)
                : null;
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateWebPage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(WebPage!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WebPageExists(WebPage!.WebPageId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/webpages");
    }

    bool WebPageExists(int webpageid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.WebPages.Any(e => e.WebPageId == webpageid);
    }
}
