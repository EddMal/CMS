@layout Layout.EmptyLayout

@page "/webpages/editwebpage"


@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CMS.Entities
@using CMS.Data
@using CMS.Components.Pages.ContentPages
@rendermode InteractiveServer
@using BlazorComponents.HtmlTemplates
@namespace CMS.Components.Pages.WebPages
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject IGetCurrentUserService GetCurrentUserService
@implements IAsyncDisposable




<!-- Overlay that covers the entire for soft transitions-->
<div id="overlay"></div>

    @* Todo: Investigate the handling of the use of components, to remove excess use/"writing" of components*@
    @if(pageExecution != ExecuteAction.SelectCellCreate)
    {
      
    @if (pageExecution != ExecuteAction.Preview)
            {
            <div class="tools-and-infomessage">
                <div class="containerMainButtons">
                    <div class="button-container">
                        @if (hideToolbar)
                        {
                            <div class="icon-container">
                                <a class="btn overlay-btn-main" @onclick="()=> HideToolsAsync()" aria-label="Förhandgranska" title="Förhandgranska">
                                    <i class="fa fa-wrench fa-1x" aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Verktyg</span>
                            </div>
                        }
                        else
                        {
                            <div class="icon-container">
                                <a class="btn overlay-btn-main" @onclick="()=> PauseEditContent()" aria-label="Förhandgranska" title="Förhandgranska">
                                    <i class="fa fa-pause fa-1x" aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Granska</span>
                            </div>

                            <div class="icon-container">
                                <a class="btn overlay-btn-main" @onclick="()=> AddContent()" aria-label="Lägg till innehåll" title="Lägg till innehåll">
                                    <i class="fa fa-plus-square-o fa-2x" style="margin-top:2px;"aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Nytt Innehåll</span>
                            </div>


                            <div class="icon-container">
                                <a class="btn overlay-btn-main" @onclick="()=> EditPageinformation()" aria-label="Redigera sidinformation" title="Redigera sidinformation">
                                    <i class="fa fa-cog fa-2x" aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Sidinställningar</span>
                            </div>

                            <div class="icon-container">
                                <a class="btn overlay-btn-main" href="@($"webpages?websiteid={WebSiteId}")" aria-label="Tillbaka till webbsajt" title="Tillbaka till webbsajt">
                                    <i class="fa fa-mail-reply fa-2x" aria-hidden="true"></i>
                            </a>
                                <span class="icon-text">Tillbaka</span>
                            </div>

                            <div class="icon-container">
                                <a class="btn overlay-btn-main" @onclick="()=> AddRowAsync()" aria-label="Lägg till innehållsrad" title="Lägg till innehållsrad">
                                <i class="fa fa-list-ol fa-2x" style="margin-top:2px;" aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Ny rad</span>
                            </div>

                            <div class="icon-container">
                                @if (deleteContentActive)
                                {

                                    <a class="btn overlay-btn-main" @onclick="()=> DeleteContentSelect()" aria-label="Avbryt" title="Avbryt">
                                        <i class="fa fa-times" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Avbryt</span>
                                }
                                else
                                {
                                    <a class="btn overlay-btn-main" @onclick="()=> DeleteContentSelect()" aria-label="Radera innehåll" title="Radera innehåll">
                                        <i class="fa fa-trash fa-2x" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Radera Innehåll</span>
                                }
                            </div>

                            <div class="icon-container">
                                @if (deleteRowActive)
                                {

                                    <a class="btn overlay-btn-main" @onclick="()=> DeleteSelectRow()" aria-label="Avbryt" title="Avbryt">
                                        <i class="fa fa-times" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Avbryt</span>
                                }
                                else
                                {
                                    <a class="btn overlay-btn-main" @onclick="()=> DeleteSelectRow()" aria-label="Radera Rad" title="Radera Rad">
                                        <i class="fa fa-trash fa-2x" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Radera rad</span>
                                }
                            </div>

                            <div class="icon-container">
                                @if (moveRowActive)
                                {

                                <a class="btn overlay-btn-main" @onclick="()=> DragRows()" aria-label="Avbryt" title="Avbryt">
                                        <i class="fa fa-times" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Avbryt</span>
                                }
                                else
                                {
                                    <a class="btn overlay-btn-main" @onclick="()=> DragRows()" aria-label="Flytta rad" title="Flytta rad">
                                            <i class="fa fa-arrows fa-2x" style="margin-top:0px; " aria-hidden="true"></i>
                                        </a>
                                        <span class="icon-text">Flytta rad</span>
                                }
                            </div>

                            <div class="icon-container">
                                @if (resizeCellColumnSpanActive)
                                {

                                    <a class="btn overlay-btn-main" @onclick="()=> ResizeCell()" aria-label="Avbryt" title="Avbryt">
                                        <i class="fa fa-times" style="margin-top:0px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Avbryt</span>
                                }
                                else
                                {
                                    <a class="btn overlay-btn-main" @onclick="()=> ResizeCell()" aria-label="Ändra storlek" title="Ändra Storlek">
                                        <i class="fa fa-sliders fa-2x" style="margin-top:0px; " aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Storlek</span>
                                }
                            </div>

                            <div class="icon-container">
                                @if (moveCellsActive)
                                {
                                    <a class="btn overlay-btn-delete" @onclick="() => DragCells()" aria-label="Ta bort" title="Flytta innehåll">
                                        <i class="fa fa-times" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Avbryt </span>
                                }
                                else
                                {
                                    <a class="btn overlay-btn-delete" @onclick="() => DragCells()" aria-label="Ta bort" title="Flytta innehåll">
                                            <i class="fa fa-mouse-pointer fa-2x" style="margin-left:5px;" aria-hidden="true"></i>
                                    </a>
                                    <span class="icon-text">Flytta innehåll</span>
                                }
                            </div>

                            <div class="icon-container">
                                <a class="btn overlay-btn-main-ghost" @onclick="()=> HideToolsAsync()" aria-label="Förhandgranska" title="Förhandgranska">
                                    <i class="fa fa-snapchat-ghost fa-2x" aria-hidden="true"></i>
                                </a>
                                <span class="icon-text">Göm</span>
                            </div>

                        }
                    </div>
                    </div>
                    <!-- Alert Section Below the Icons -->   
                    <!-- messages -->
                    @if (!hideToolbar)
                    {@* ToDo: Restructure ifstatements *@
                        <div class="user-info-message">
                            @if (infoMessage)
                            {
                                <span class="user-info-message-text">
                                    @userInfoMessage
                                </span>
                                <a class="cancle-info-message" @onclick="UserInformationMessageHide" aria-label="Stäng" title="Stäng">
                                    <i class="fa fa-times " aria-hidden="true"></i>
                                </a>
                            }
                        </div>
                    }
            </div>
        }
        else
    { @* ToDo: Clean divs *@
        <div class="tools-and-infomessage">
                <div class="containerMainButtons">
                    <div class="button-container">
                        <div class="icon-container">
                            <a class="btn overlay-btn-main-ghost" @onclick="()=> ResumeEditContent()" aria-label="Fortsätt redigera" title="Fortsätt redigera">
                                <i class="fa fa-play fa-1x" aria-hidden="true"></i>
                            </a>
                                <span class="icon-text">Redigera</span>
                        </div>
                    </div>
                </div>
                </div>
        }

           

    }

        @if (Contents == null)
        {
            <p>Denna webbsidan har inget innehåll.</p>
        }
        else if (!Contents.Any())
        { 
            <CascadingValue Value="WebPageId">
                <CreateContent />
            </CascadingValue>
            <button type="button" class="btn btn-warning" @onclick="()=> Done()"> Klar </button>
        }
        else
        {
            @switch (pageExecution)
            {
                case ExecuteAction.EditPageinformation:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                                grid-row-end: span @cell.RowSpan;
                                                grid-column-end: span @cell.ColumnSpan;
                                                position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <div class="content-wrapper">
                                            <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                        </div>
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                        }

                    }
                    </div>
                    <div class="overlay-edit">
                        <CascadingValue Value="WebPageId">
                            <CMS.Components.Pages.WebPages.Edit @key="WebPageId" />
                        </CascadingValue>
                        <button type="button" class="btn btn-warning btn-warning-edit" @onclick="()=> EditPageinformationDone()"> Tillbaka </button>
                    </div>
                @* PageExecution = ExecuteAction.Preview; *@
                @*   if (scrollPositionNotRestored)
                {
                       
                    scrollPositionNotRestored = false;
                } *@
                break;         
                }
                case ExecuteAction.EditContent:
                {

                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                                        grid-row-end: span @cell.RowSpan;
                                                        grid-column-end: span @cell.ColumnSpan;
                                                        position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                                    
                                        if (cell.ContentId == contentForEditing)
                                        {
                                            @* Todo: Change this use of templateId is not good practice, should retrived from a injected setting file : *@
                                        if (contentLayout.TemplateId == 9)
                                            {
                                                <div class="containerEditWebPageContent" style="position: relative;">
                                                    <div class="content">
                                                    <CascadingValue Value="contentLayout.ContentId">
                                                            <EditContent />
                                                        </CascadingValue>
                                                    </div>
                                                    <div class="nav-edit-done-button-container">
                                                        <button type="button" class="btn btn-warning" @onclick="()=> ResumeEditContent()"> Tillbaka </button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="containerEditWebPageContent" style="position: relative;">
                                                    <div class="content">
                                                <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                                    </div>
                                                    <div class="overlay-edit">
                                                    <CascadingValue Value="contentLayout.ContentId">
                                                            <EditContent />
                                                        </CascadingValue>
                                                        <button type="button" class="btn btn-warning" @onclick="()=> ResumeEditContent()"> Tillbaka </button>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="content-wrapper">
                                                <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                                
                    break;
                }
                case ExecuteAction.CreateContent:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                        grid-row-end: span @cell.RowSpan;
                                        grid-column-end: span @cell.ColumnSpan;
                                        position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                    <div class="content-wrapper">
                                        <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                    </div>
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    <div class="overlay-edit">
                        <CascadingValue Value="WebPageId">
                            <CreateContent />
                        </CascadingValue>
                        <button type="button" class="btn btn-warning btn-create" @onclick="()=> CreateContentDone()"> Tillbaka </button>
                    </div>
                    @*  <div class="containerEditWebPageContent" style="position: relative;">
                        <div class="content">
                            <ContentPreview ContentId="@content.ContentId" />
                        </div>
                        <div class="overlay-edit">
                            <CascadingValue Value="content.WebPageId">
                                <CreateContent />
                            </CascadingValue>
                        <button type="button" class="btn btn-warning btn-create" @onclick="()=> CreateDone()"> Klar </button>
                        </div>
                    </div> *@
                    @* PageExecution = ExecuteAction.Preview; *@
                    break;
                }
                case ExecuteAction.SelectCellCreate:
                {
                <div class="container-content-layout-grid-create">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div @onclick="() => SelectCellForNewContent(cell)" class="content-item-create"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                                    grid-row-end: span @cell.RowSpan;
                                                    grid-column-end: span @cell.ColumnSpan;
                                                    position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                    <div class="content-wrapper">
                                        <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                    </div>
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>                
                    break;
                }
                case ExecuteAction.EditSelect:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div @onclick="() => EditContent(contentLayout)" class="content-item"
                                    style="grid-row: @cell.Row; grid-column: @cell.Column;
                                    grid-row-end: span @cell.RowSpan;
                                    grid-column-end: span @cell.ColumnSpan;
                                    position: relative;"
                                    data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <div class="content-wrapper">
                                            <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                        </div>
                                    }
                                    else
                                    {
                                    <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.Preview:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                            grid-row-end: span @cell.RowSpan;
                                            grid-column-end: span @cell.ColumnSpan;
                                            position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.DeleteSelect:
                {
                    <div class="container-content-layout-grid-delete">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            if (cell != null)
                            {
                                    @if (cell.ContentId != null)
                                    {
                                        <div @onclick="() => DeleteContent(cell.ContentId)" class="content-item-delete"
                                                style="grid-row: @cell.Row; grid-column: @cell.Column;
                                                grid-row-end: span @cell.RowSpan;
                                                grid-column-end: span @cell.ColumnSpan;
                                                position: relative;"
                                                data-content-id="@cell.ContentId">

                                                <div class="content-wrapper">
                                                    <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                                </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="content-item">
                                            <p style="color:white;"></p>
                                        </div>
                                    }
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.Delete:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Todo:remove when not needed.
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                            grid-row-end: span @cell.RowSpan;
                                            grid-column-end: span @cell.ColumnSpan;
                                            position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <div class="content-wrapper">
                                            <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                        </div>
                                }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    <div class="overlay-edit">
                        <CascadingValue Value="@contentForEditing">
                            <CMS.Components.Pages.ContentPages.Delete />
                        </CascadingValue>
                        <button type="button" class="btn btn-warning" @onclick="()=> DeleteDoneAsync()"> Tillbaka </button>
                    </div>
                    break;
                }
@*                 case ExecuteAction.ResizeSelect:
                { 
                    break;
                } *@
                case ExecuteAction.Resize:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var content = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                <div class="content-item"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                        grid-row-end: span @cell.RowSpan;
                                        grid-column-end: span @cell.ColumnSpan;
                                        position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <div class="content-wrapper">
                                            <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                        </div>

                                        @* <div class="containerEditWebPagebuttons">
                                            <div class="button-container">
                                            <a class="btn overlay-btn-edit" @onclick="() => EditContent(content)" aria-label="Redigera" title="Redigera">
                                            <i class="fa fa-pencil fa-2x" aria-hidden="true"></i>
                                            </a>
                                            <a class="btn overlay-btn-delete" @onclick="() => DeleteContent(content.ContentId)" aria-label="Ta bort" title="Radera">
                                            <i class="fa fa-trash-o fa-2x" aria-hidden="true"></i>
                                            </a>
                                            </div>
                                            </div> *@

                                        <!-- Sliders for RowSpan and ColumnSpan -->
                                        @* <div class="grid-edit-controls"> *@
                                            @* <label for="row-span-@cell.ContentId">Row Span: @cell.RowSpan</label>
                                                <input type="range" id="row-span-@cell.ContentId"
                                                value="@cell.RowSpan" min="1" max="12"
                                                @oninput="(e) => UpdateRowSpan(cell, int.Parse(e.Value.ToString()))"
                                                step="1" /> *@
@* 
                                            <label for="col-span-@cell.ContentId">Column Span: @cell.ColumnSpan</label>
                                            <input type="range" id="col-span-@cell.ContentId"
                                                    value="@cell.ColumnSpan" min="1" max="12"
                                                    @oninput="(e) => UpdateColumnSpan(cell, int.Parse(e.Value.ToString()))"
                                                    step="1" />
                                            </div>*@
                                    <div class="grid-edit-controls">
                                       @*  <label for="col-span-@cell.ContentId">Column Span:</label> *@

                                        <!-- Slider input (range) -->
                                        <input type="range" id="col-span-@cell.ContentId"
                                               value="@cell.ColumnSpan" min="1" max="12"
                                               step="1" class="slider" @oninput="(e) => UpdateColumnSpan(cell, e.Value.ToString())" />

                                        <!-- Editable input field to show and edit column span -->
                                        <div class="slider-value-container">
                                            <input type="number" id="col-span-value-@cell.ContentId"
                                                   value="@cell.ColumnSpan" class="slider-value" min="1" max="12" step="1" @oninput="(e) => UpdateColumnSpan(cell, e.Value.ToString())" />
                                        </div>
                                    </div>
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.DragCell:
                {
                    // Move to statemachine
                    <div class="container-content-layout-grid-drag-cell">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var content = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {   
                                <div class="content-item-drag-cell"
                                        @onmousedown="() => OnDragStart( cell)"
                                        @onmouseup="() => OnDragEndAsync()"
                                        @onmouseenter="() => OnDragOver( cell.Row, cell.Column, cell.ContentId)"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                        grid-row-end: span @cell.RowSpan;
                                        grid-column-end: span @cell.ColumnSpan;
                                        position: relative;"
                                        data-content-id="@cell.ContentId">
                                    @if (cell.ContentId != null)
                                    {
                                            <div class="content-wrapper">                                            
                                                    <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                            </div>
                                    }
                                    else
                                    {
                                            <p style="color:white;"></p>
                                    }
                                </div>
                            
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.DragRow:
                {
                    <div class="container-content-layout-grid">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var content = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);

                            if (cell != null)
                            {
                                <div class="content-item"
                                        draggable="true"
                                        @ondragstart="(e) => OnDragStartRow(cell.Row)"
                                        @ondragend="(e) => OnDragEndRowAsync(e)"
                                        @ondragover="(e) => OnDragOverRow(cell.Row)"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                        grid-row-end: span @cell.RowSpan;
                                        grid-column-end: span @cell.ColumnSpan;
                                        position: relative;"
                                        data-content-id="@cell.ContentId">

                                    @if (cell.ContentId != null)
                                    {
                                        <div class="content-wrapper">
                                            <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                        </div>
                                    }
                                    else
                                    {
                                        <p style="color:white;"></p>
                                    }
                                </div>
                            }
                        }
                    </div>
                    break;
                }
                case ExecuteAction.DeleteRowSelect:
                {
                    <div class="container-content-layout-grid-delete">
                        @foreach (var cell in layout.LayoutCells)
                        {
                            // Find content for the cell
                            var contentLayout = Contents.FirstOrDefault(l => l.ContentId == cell.ContentId);
                            if (cell != null)
                            {
                                    <div @onclick="() => DeleteRowAsync(cell.Row)" @onmouseover="() => GetCellsRow(cell)" class="content-item-delete-row"
                                        style="grid-row: @cell.Row; grid-column: @cell.Column;
                                        grid-row-end: span @cell.RowSpan;
                                        grid-column-end: span @cell.ColumnSpan;
                                        position: relative;"
                                        data-content-id="@cell.ContentId"
                                        data-row="@cell.Row"
                                        data-column="@cell.Column">

                                        @if (cell.ContentId != null)
                                        {
                                            <div class="content-wrapper">
                                                <ContentPreview ContentId="@cell.ContentId.Value" @key="@cell.ContentId" />
                                            </div>
                                        }
                                        else
                                        {
                                            <p style="color:white;"></p>
                                        }
                                    </div>
                            }
                        }
                    </div> 
                    break;
                }
                case ExecuteAction.Wait:
                {
                    break;
                }
                default:          
                {
                    UserInformationMessage("Something went wrong. It is not you, it is us..");
                    break;
                }
            }
}

<style>
    :root {
        --layout-background-color: @webPageBackgroundColor;
    }

    html, body {
        height: 100%; /* Ensure the body takes the full height of the viewport */
        margin: 0; /* Remove any default margin */
        padding: 0; /* Remove any default padding */
    }

    body {
        background-color: @webPageBackgroundColor;
    }

    .main .content {
        background-color: @webPageBackgroundColor;
        transition: background-color 0.3s ease; /* Optional: smooth color transition */
        margin: 0; /* Ensure no margin */
        padding: 0; /* Ensure no padding */
        width: 100%; /* Ensure content spans the full width */
        height: 100%; /* Ensure content spans the full height */
    }

</style>
