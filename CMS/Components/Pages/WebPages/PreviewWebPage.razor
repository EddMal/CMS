@page "/webpages/previewpage/{webPageId:int}"
@layout Layout.EmptyLayout
@using CMS.Shared
@using CMS.Data
@using CMS.Models
@using CMS.Entities
@using CMS.Services
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@rendermode InteractiveServer
@inject VisitorCounterService VisitorCounterService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<Breadcrumbs Crumbs="@(new List<(string, string)>
    {
        ("Hem", "/"),
        //("Websites", "/websites"),
        ("Webbsidor", $"/webpages?websiteid={WebSiteId}"),
        ("Förhandsgranskning", $"/webpages/previewpage/{WebPageId}")
    })" />

<h3 class="textGrey">Förhandsgranskning Webbsida</h3>
<body style="background-color: @webPageBackgroundColor">
    @if (contentList == null)
    {
        <p>Laddar...</p>
    }
    else if (contentList.Count == 0)
    {
        <p class="textGrey" >Inget innehåll tillgängligt för denna webbsida.</p>
    }
    else
    {
        @foreach (var content in contentList)
        {
            <div class="content-preview"  style="background-color: @webPageBackgroundColor;">
                <CMS.Components.Pages.ContentPages.ContentPreview ContentId="@content.ContentId" />
            </div>
        }
    }
</body>
<p class="textGrey">Denna sida har besökts @VisitCount gånger.</p>

<style>
    :root {
        --layout-background-color: @webPageBackgroundColor;
    }

    html, body {
        height: 100%; /* Ensure the body takes the full height of the viewport */
        margin: 0; /* Remove any default margin */
        padding: 0; /* Remove any default padding */
    }

    body {
        background-color: @webPageBackgroundColor;
    }

    .main .content {
        background-color: @webPageBackgroundColor;
        transition: background-color 0.3s ease; /* Optional: smooth color transition */
        margin: 0; /* Ensure no margin */
        padding: 0; /* Ensure no padding */
        width: 100%; /* Ensure content spans the full width */
        height: 100%; /* Ensure content spans the full height */
    }

    .textGrey{
        background-color:black;
        color: white;
    }

</style>

@code {
    [Parameter] public int WebPageId { get; set; }

    private List<Content> contentList;
    private int VisitCount { get; set; }
    private string CurrentPageUrl => NavigationManager.Uri;
    private int WebSiteId { get; set; }
    private string webPageBackgroundColor { get; set; } = "white";

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbContextFactory.CreateDbContext();

        contentList = await dbContext.Contents
                                     .Where(c => c.WebPageId == WebPageId)
                                     .ToListAsync();

        // Get the WebSiteId associated with this WebPage
        var webPage = await dbContext.WebPages.FirstOrDefaultAsync(wp => wp.WebPageId == WebPageId);
        if (webPage != null)
        {
            WebSiteId = webPage.WebSiteId;
            webPageBackgroundColor = webPage.BackgroundColor ?? "white"; // Default to white if null

            // Check if the user is logged in
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                // Only increment the visit count if the user is not logged in
                await VisitorCounterService.IncrementPageVisitAsync(WebSiteId, CurrentPageUrl);
            }

            // Get the updated visit count for this page
            VisitCount = await VisitorCounterService.GetPageVisitCountAsync(WebSiteId, CurrentPageUrl);
        }
    }
}



