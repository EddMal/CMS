@page "/webpages/create"
@attribute [Authorize]

@inject IGetCurrentUserService GetCurrentUserService
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Skapa webbsida</PageTitle>

<h1>Skapa</h1>

<h4>Webbsida</h4>
<hr />
<div class="row"> 
    <div class="col-md-10">
        <EditForm method="post" Model="WebPage" OnValidSubmit="AddWebPage" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Titel:</label> 
                <InputText id="title" @bind-Value="WebPage.Title" class="form-control" /> 
                <ValidationMessage For="() => WebPage.Title" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Beskrivning:</label>
                <InputText id="description" @bind-Value="WebPage.Description" class="form-control" />
                <ValidationMessage For="() => WebPage.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="visitor-url" class="form-label">Besöks Url:</label>
                <InputText id="visitor-url" @bind-Value="WebPage.VisitorUrl" class="form-control" />
                <ValidationMessage For="() => WebPage.VisitorUrl" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="creationdate" class="form-label">Skapad:</label>
                <InputDate id="creationdate" @bind-Value="WebPage.CreationDate" class="form-control" readonly />
                <ValidationMessage For="() => WebPage.CreationDate" class="text-danger" />
            </div>
            
            <button type="submit" class="btn btn-primary">Skapa</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/webpages">Tillbaka</a>
</div>

@code {

    [SupplyParameterFromForm]
    public WebPage WebPage { get; set; } = new();

    [SupplyParameterFromQuery]
    public int WebSiteId { get; set; }

    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        this.UserId = user.Id;
    } 

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddWebPage()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();

        WebPage.WebSiteId = WebSiteId;
        
        using var context = DbFactory.CreateDbContext();
        WebPage.UserId = user.Id;
        context.WebPages.Add(WebPage);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/webpages/createmulti?webpageid={WebPage.WebPageId}");
        
        //NavigationManager.NavigateTo($"webpages/details?WebPageId={WebPage.WebPageId}");
    }   
}