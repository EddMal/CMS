

@page "/webpages/editwebpage"


@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CMS.Entities
@using CMS.Data
@using CMS.Components.Pages.ContentPages
@rendermode InteractiveServer
@using BlazorComponents.HtmlTemplates
@namespace CMS.Components.Pages.WebPages
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject IGetCurrentUserService GetCurrentUserService
@implements IAsyncDisposable

 <style>
    .containerEditWebPage {
        position: relative;
        padding: 0px;
        border: 0px solid #ccc;
        background-color: rgba(0, 0, 0, 0);
    }

    .container {
        position: relative;
        padding: 0px;
        border: 0px solid #ccc;
        background-color: rgba(0, 0, 0, 0);
    }

    .containerEditWebPagebuttons {
        position: absolute; /* Position the buttons absolutely within the container */
        top: 15%; /* Adjust to control vertical position of buttons */
        left: 75%; /* Adjust to control horizontal position (move towards the right) */
        transform: translate(-50%, 0); /* Adjust buttons horizontally */
        z-index: 10; /* Ensure buttons appear above content */
        display: flex; /* Arrange buttons side by side */
        gap: 20px; /* Space between Edit and Delete buttons */
    }

    .overlay-btn-edit {
        background-color: rgba(0, 123, 255, 0.6); /* Blue background */
        color: white;
        border: 2px solid #007bff;
        padding: 10px 20px;
    }

    .overlay-btn-delete {
        background-color: rgba(255, 0, 0, 0.6); /* Red background */
        color: white;
        border: 2px solid #ff0000;
        padding: 10px 20px;
    }

        /* Optional: Hover effect for buttons */
        .overlay-btn-edit:hover, .overlay-btn-delete:hover {
            background-color: #0056b3;
        }

    .button-container {
        display: flex;
        justify-content: flex-start; /* Align the buttons to the left */
        flex-wrap: nowrap; /* Prevent buttons from wrapping */
    }

        .button-container button {
            flex: 0 0 auto; /* Ensure buttons do not stretch */
        }
    .overlay-edit {
        position: absolute; /* Position relative to the containerEditWebPage */
        top: 200%; /* Position from the top (50% of the parent container) */
        left: 50%; /* Position from the left (50% of the parent container) */
        transform: translate(-50%, -50%); /* Offset the button by half its width and height */
        z-index: 10;
        background-color: rgba(255, 255, 255, 1);
        color: black;
        border: 2px solid #007bff; /* Blue border */
        padding: 10px 20px;
    }

    .overlay-editwebpageinfo {
        position: absolute; /* Position relative to the viewport (screen) */
        top: 20%; /* Adjust this value as needed for how far down you want it to appear */
        left: 50%; /* Center it horizontally */
        transform: translateX(-50%); /* Offset the button by half its width */
        z-index: 10;
        background-color: rgba(255, 255, 255, 1);
        color: black;
        border: 2px solid #007bff;
        padding: 10px 20px;
    }

    .overlay-btn:hover {
        background-color: #0056b3;
    }

    .table, .table th, .table td {
        border: none !important; /* Removes borders from the whole table */
    }

        /* Optional: Remove padding to ensure tight layout */
        .table th, .table td {
            padding: 0 !important;
        }

</style>


<p>

    @if (PageExecution != ExecuteAction.Preview)
    {
        <button type="button" class="btn btn-warning" @onclick="()=> PauseEditContent()"> Förhandsgranska Sida </button>
        <button type="button" class="btn btn-warning" @onclick="()=> AddContent()"> Lägg till innehåll </button>
        <button type="button" class="btn btn-success" @onclick="()=> EditPageinformation()"> Redigera Sidans information </button>
    }
    else
    {
        <button type="button" class="btn btn-warning" @onclick="()=> ResumeEditContent()"> Redigera innehåll </button>
    }
</p>

@if (contents == null) 
{
    <p>Denna webbsidan har inget innehåll.</p>
}
else
{
    <QuickGrid Class="table" Items="contents">

            
        <TemplateColumn Context="content">
            @switch (PageExecution)
            {
                case ExecuteAction.EditPageinformation:
                {
                    <div class="containerEditWebPage" style="position: relative;">
                        <div class="content">
                            <ContentPreview ContentId="@content.ContentId" />
                        </div>
                            <div class="overlay-editwebpageinfo">
                            <CascadingValue Value="content.WebPageId">
                                <CMS.Components.Pages.WebPages.Edit />
                            </CascadingValue>
                            <button type="button" class="btn btn-warning" @onclick="()=> EditPageinformationDone()"> Avbryt </button>
                        </div>
                    </div>
                        PageExecution = ExecuteAction.Preview;
                        break;         
                    }
                case ExecuteAction.EditContent:
                    {
                        if (content.ContentId == ContentForEditing)
                        {
                            <div class="containerEditWebPage" style="position: relative;">
                                <div class="content">
                                    <ContentPreview ContentId="@content.ContentId" />
                                </div>
                                <div class="overlay-edit">
                                    <CascadingValue Value="content.ContentId">
                                        <EditContent />
                                    </CascadingValue>
                                    <button type="button" class="btn btn-warning" @onclick="()=> ResumeEditContent()"> Avbryt </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="content">
                                <ContentPreview ContentId="@content.ContentId" />
                            </div>
                        }
                       
                    break;
                }
                case ExecuteAction.CreateContent:
                {
                    <div class="containerEditWebPage" style="position: relative;">
                        <div class="content">
                            <ContentPreview ContentId="@content.ContentId" />
                        </div>
                        <div class="overlay-edit">
                            <CascadingValue Value="content.WebPageId">
                                <CreateContent />
                            </CascadingValue>
                            <button type="button" class="btn btn-warning" @onclick="()=> CreateDone()"> Klar </button>
                        </div>
                    </div>
                    PageExecution = ExecuteAction.Preview;
                    break;
                }
                case ExecuteAction.EditSelect:
                {
                    <div class="containerEditWebPage" style="position: relative;">
                        <div class="content">
                            <ContentPreview ContentId="@content.ContentId" />
                        </div>

                        <!-- Button container placed in the top-right corner of the content -->
                        <div class="containerEditWebPagebuttons">
                            <div class="button-container">
                                <button class="btn btn-primary overlay-btn-edit btn-primary-outline" @onclick="()=> EditContent(content)"> Redigera </button>
                                    <button class="btn btn-primary overlay-btn-delete btn-primary-outline" @onclick="()=> DeleteContent(content.ContentId)"> Ta bort </button>
                            </div>
                        </div>
                    </div>
                     break;
                }
                case ExecuteAction.Preview:
                {
                    <div class="content">
                        <ContentPreview ContentId="@content.ContentId" />
                    </div>
                    
                    break;
                }
                case ExecuteAction.Wait:
                {
                    break;
                }
                case ExecuteAction.Delete:
                    {
                        <div class="containerEditWebPage" style="position: relative;">
                            <div class="content">
                                <ContentPreview ContentId="@content.ContentId" />
                            </div>
                            <div class="overlay-edit">
                        
                                    <CMS.Components.Pages.ContentPages.Delete ContentId="@ContentForEditing" />
                                
                                <button type="button" class="btn btn-warning" @onclick="()=> CreateDone()"> Klar </button>
                            </div>
                        </div>
                        PageExecution = ExecuteAction.Wait;
                        break;
                    }
                default:          
                {
                    <div class="content">
                        <ContentPreview ContentId="@content.ContentId" />
                    </div>
                    
                    break;
                }
            }
        </TemplateColumn>
    </QuickGrid>
}