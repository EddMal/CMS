@page "/content/delete"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using CMS.Entities
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Radera innehåll</PageTitle>

<h1>Radera</h1>

<h3>Är du säker på att du vill radera innehållet?</h3>
<div>
    <h4>Content</h4>
    <hr />
    @if (content is null)
    {
        <p><em>Laddar...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">ContentId</dt>
            <dd class="col-sm-10">@content.ContentId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WebPageId</dt>
            <dd class="col-sm-10">@content.WebPageId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Innehållsnamn</dt>
            <dd class="col-sm-10">@content.ContentName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Innehållsmall</dt>
            <dd class="col-sm-10">@content.Template.TemplateType</dd>
        </dl>
        <EditForm method="post" Model="content" OnValidSubmit="DeleteContent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(content is null)">Delete</button> |
            <a href="/content">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Content? content;

    [SupplyParameterFromQuery]
    public int ContentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        content = await context.Contents.FirstOrDefaultAsync(m => m.ContentId == ContentId);

        if (content is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteContent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Contents.Remove(content!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/contents?webpageid={content.WebPageId}");
    }
}
