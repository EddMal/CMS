@page "/content/delete"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using CMS.Entities
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Radera innehåll</PageTitle>

@* <h1>Radera</h1>

<h3>Är du säker på att du vill radera innehållet?</h3> *@
<div>
    <hr />
    @if (content is null)
    {
        <p><em>Laddar...</em></p>
    }
    else
    {
        @*  <dl class="row">
            <dt class="col-sm-2">ContentId</dt>
            <dd class="col-sm-10">@content.ContentId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WebPageId</dt>
            <dd class="col-sm-10">@content.WebPageId</dd>
        </dl> *@
        @*       <dl class="row">
            <dt class="col-sm-2">Innehåll: @content.ContentName</dt>
            <dd class="col-sm-10">@content.ContentName</dd>
        </dl> *@
        @*         <dl class="row">
            <dt class="col-sm-2">Innehållsmall</dt>
            <dd class="col-sm-10">@content.Template.TemplateType</dd>
        </dl> *@
        if (Success == false)
        {
            <h1>Radera</h1>

            <h3>Är du säker på att du vill radera innehållet?</h3>
            
                <hr />
            <dl class="row">
                <div class="content">
                    <ContentPreview ContentId="@content.ContentId" />
                </div>
            </dl>
            <dl class="row">
                <EditForm method="post" Model="content" OnValidSubmit="()=> DeleteContent(content.ContentId)" FormName="delete"     
            Enhance
                 >
                     <button type="submit" class="btn btn-danger" disabled="@(content is null)">Radera</button>
                 </EditForm>
             </dl>
        }
        else
        {
            <dl class="row">
                Innehåll raderat.
            </dl>
        }
        @*  <a href="@($"contents?webpageid={content.WebPageId}")">Tillbaka</a> *@
    }
</div>

@code {
    Content? content { get; set; } = null;

    [CascadingParameter]
    public int? ContentId { get; set; } = null;

    private bool Success { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        if (ContentId != null)
        {
            content = await context.Contents.FirstOrDefaultAsync(m => m.ContentId == ContentId);
        }
        else
        {
            Console.WriteLine("No value passed to Delete content for ContentId, Id is null."); 
        }

        if (content == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteContent(int contentId)
    {

        using var context = DbFactory.CreateDbContext();
        var contentToDelete = await context.Contents.FirstOrDefaultAsync(c => c.ContentId == contentId);

        if (contentToDelete != null)
        {
            context.Contents.Remove(contentToDelete);
            await context.SaveChangesAsync();
            Success = true;
            // NavigationManager.NavigateTo("/contents");
        }
    }

}
