@page "/contents"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CMS.Entities
@using CMS.Data
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@implements IAsyncDisposable

@attribute [Authorize]

<PageTitle>Index</PageTitle>

<h1>Index Content</h1>

<p>
    <a href="content/create">(Scaffolded)Create New</a> |
    <a href="@($"/content/createcontent?webpageid={WebPageId}")">Create New</a>
</p>

@if (contents == null || !contents.Any())
{
    <p>No content available for this webpage.</p>
}
else
{
    <QuickGrid Class="table" Items="contents">
        <PropertyColumn Property="content => content.ContentId" />
        <PropertyColumn Property="content => content.WebPageId" />
        <PropertyColumn Property="content => content.ContentName" />
        <PropertyColumn Property="content => content.TextInputsJson" />
        @* <PropertyColumn Property="content => content.Backgroundcolor" />
        <PropertyColumn Property="content => content.Textcolor" /> *@
        <PropertyColumn Property="content => content.TemplateId" />

        <TemplateColumn Context="content">
            <a href="@($"/preview/{content.ContentId}")">Preview</a> |
            <a href="@($"content/edit?contentid={content.ContentId}")">Edit</a> |
            <a href="@($"content/details?contentid={content.ContentId}")">Details</a> |
            <a href="@($"content/delete?contentid={content.ContentId}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
}


@code {
    IQueryable<Content> contents = Enumerable.Empty<Content>().AsQueryable();

    [SupplyParameterFromQuery]
    public int? WebPageId { get; set; }

    ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        if (WebPageId.HasValue)
        {
            // Fetch content filtered by WebPageId
            contents = context.Contents.Where(c => c.WebPageId == WebPageId.Value);
        }
        else
        {
            // Fetch all content if no WebPageId is provided
            contents = context.Contents;
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}