@page "/contents"
@attribute [Authorize]

@using CMS.Shared
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CMS.Entities
@using CMS.Data
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject IGetCurrentUserService GetCurrentUserService

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="my-4">Index Innehåll</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Hem</a></li>
                    <li class="breadcrumb-item"><a href="/webpages?websiteid=@WebSiteId">Webbsidor</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Innehåll</li>
                </ol>
            </nav>
            <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
                <div class="mb-2 mb-md-0">
                    <a href="@($"/webpages/createmulti?webpageid={WebPageId}")" class="btn btn-primary me-2">Skapa flera innehåll</a>
                    <a href="@($"/content/createcontent?webpageid={WebPageId}")" class="btn btn-secondary">Skapa en innehåll</a>
                </div>
                
            </div>

            @if (contents == null)
            {
                <p>Laddar...</p>
            }
            else if (!contents.Any())
            {
                <p>Denna webbsidan har inget innehåll.</p>
            }
            else
            {
                <div class="table-responsive">
                    <QuickGrid Items="@contents.AsQueryable()" Class="table table-striped table-hover">
                        @* <PropertyColumn Property="content => content.ContentId" Title="ID" /> *@
                        @* <PropertyColumn Property="content => content.ContentName" Title="Namn" /> *@
                        <PropertyColumn Property="content => content.CreationDate" Title="Skapad" Format="yyyy-MM-dd" />
                        <PropertyColumn Property="content => content.LastUpdated" Title="Uppdaterad" Format="yyyy-MM-dd" />

                        <TemplateColumn Title="Åtgärder" Align="Align.Center">
                            <div class="btn-group" role="group">
                                <a class="btn btn-sm btn-outline-primary" href="@($"/preview/{context.ContentId}")">Förhandsgranska</a>
                                <a class="btn btn-sm btn-outline-secondary" href="@($"/content/editcontent?contentid={context.ContentId}")">Redigera</a>
                                <a class="btn btn-sm btn-outline-info" href="@($"content/details?contentid={context.ContentId}")">Detaljer</a>
                                <a class="btn btn-sm btn-outline-danger" href="@($"content/delete?contentid={context.ContentId}")">Radera</a>
                            </div>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
            }


        </div>
    </div>
</div>


@code {
    private List<Content> contents;


    [SupplyParameterFromQuery]
    public int? WebPageId { get; set; }

    [SupplyParameterFromQuery]
    public int? WebSiteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadContents();
    }

    private async Task LoadContents()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        if (WebPageId.HasValue)
        {
            contents = await context.Contents
                .Where(c => c.WebPageId == WebPageId.Value)
                .ToListAsync();

            if (!WebSiteId.HasValue)
            {
                var webPage = await context.WebPages
                    .FirstOrDefaultAsync(wp => wp.WebPageId == WebPageId.Value);
                WebSiteId = webPage?.WebSiteId;
            }
        }
        else
        {
            contents = await context.Contents.ToListAsync();
        }
    }
}


