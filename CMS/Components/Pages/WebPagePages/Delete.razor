@page "/webpages/delete"

@using Microsoft.EntityFrameworkCore
@using CMS.Entities
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>WebPage</h4>
    <hr />
    @if (webpage is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">WebSiteId</dt>
            <dd class="col-sm-10">@webpage.WebSiteId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Header</dt>
            <dd class="col-sm-10">@webpage.Header</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Body</dt>
            <dd class="col-sm-10">@webpage.Body</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Footer</dt>
            <dd class="col-sm-10">@webpage.Footer</dd>
        </dl>
        <EditForm method="post" Model="webpage" OnValidSubmit="DeleteWebPage" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(webpage is null)">Delete</button> |
            <a href="/webpages">Back to List</a>
        </EditForm>
    }
</div>

@code {
    WebPage? webpage;

    [SupplyParameterFromQuery]
    public int WebPageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        webpage = await context.WebPages.FirstOrDefaultAsync(m => m.WebPageId == WebPageId);

        if (webpage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteWebPage()
    {
        using var context = DbFactory.CreateDbContext();
        context.WebPages.Remove(webpage!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/webpages");
    }
}
