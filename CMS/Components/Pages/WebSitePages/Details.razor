@page "/websites/details"
@using CMS.Entities
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Detaljer</PageTitle>

<h1>Detaljer</h1>

<div>
    <h4>WebSida</h4>
    <hr />
    @if (website is null)

    {
        <p><em>Loading...</em></p>
    }

    else

    {
        <dl class="row">
            <dt class="col-sm-2">Titel</dt>
            <dd class="col-sm-10">@website.Title</dd>
            <dt class="col-sm-2">Beskrivning</dt>
            <dd class="col-sm-10">@website.Description</dd>
            <dt class="col-sm-2">Skapad</dt>
            <dd class="col-sm-10">@website.CreationDate</dd>
            <dt class="col-sm-2">Senast uppdaterad</dt>
            <dd class="col-sm-10">@website.LastUpdated</dd>
            <AuthorizeView Roles="Admin">
                <dt class="col-sm-2">Användar Id</dt>
                <dd class="col-sm-10">@website.UserId</dd>
            </AuthorizeView>
        </dl>

        <div>
            <a href="@($"/websites/edit?websiteid={website.WebSiteId}")">Redigera</a> |
            <a href="@($"/webpages?websiteid={website.WebSiteId}")">Webbsidor</a> |
            <a href="@($"/websites")">Tillbaka</a>
        </div>

    }
</div>

@code {
    WebSite? website;



    [SupplyParameterFromQuery]

    public int WebSiteId { get; set; }



    protected override async Task OnInitializedAsync()

    {

        using var context = DbFactory.CreateDbContext();

        website = await context.WebSites.FirstOrDefaultAsync(m => m.WebSiteId == WebSiteId);



        if (website is null)

        {

            NavigationManager.NavigateTo("notfound");

        }

    }
}
