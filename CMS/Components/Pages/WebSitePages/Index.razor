@page "/websites"
@attribute [Authorize]

@using CMS.Data
@inject IGetCurrentUserService GetCurrentUserService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject VisitorCounterService VisitorCounterService

<PageTitle>Mina webbsites</PageTitle>

    @* ny font test *@
<div class="website-container" style="display: flex; flex-direction: column; align-items: center; justify-content: center; margin: 15px auto; padding: 15px; background-color: bisque; border-radius: 8px; box-shadow: 10px 10px 5px #dbdbd6; width: fit-content; margin-bottom: 50px; font-family: 'Trebuchet MS', sans-serif;">
    <h3 style="margin: 0; ">Mina webbsites</h3>
    <p style="margin: 0;">
        <a href="websites/create">Skapa ny webbsite</a>
    </p>
</div>

@if (UserId != null && WebSitesWithVisits != null)
{
    <div class="flex-container" style="display: flex; flex-wrap: wrap; justify-content: center;">
        @foreach (var website in WebSitesWithVisits)
        {
            <div style="margin: 10px;">
                <WebSiteCard WebSite="@website.WebSite" VisitCount="@website.VisitCount" />
            </div>
        }
    </div>
}
else
{
    <p>Loading...</p>
}


@code {
    public string UserId { get; set; }
    ApplicationDbContext context = default!;
    private List<WebSiteWithVisitCount> WebSitesWithVisits = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        if (user != null)
        {
            UserId = user.Id;

            context = DbFactory.CreateDbContext();

            var userWebSites = await context.WebSites
                .Include(w => w.WebPages)
                .Where(w => w.UserId == UserId)
                .ToListAsync();

            // Loop to add the VisitCount to the WebSiteWithVisitCount object, done once for each website belonging to a specific UserId. Admin implementation has to wait
            foreach (var website in userWebSites)
            {
                // Get all visits for the website
                var visits = await VisitorCounterService.GetAllPageVisitsAsync(website.WebSiteId);

                // Sum the VisitCount from the WebSiteVisit collection
                var totalVisitCount = visits.Sum(v => v.VisitCount);

                WebSitesWithVisits.Add(new WebSiteWithVisitCount
                {
                    WebSite = website,
                    VisitCount = totalVisitCount
                });
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }

    private class WebSiteWithVisitCount
    {
        public WebSite WebSite { get; set; }
        public int VisitCount { get; set; }
    }
}
