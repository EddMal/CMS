@page "/websites/create"
@attribute [Authorize]
@inject IGetCurrentUserService GetCurrentUserService
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>
<h4>WebSite</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="WebSite" OnValidSubmit="AddWebSite" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="WebSite.Title" class="form-control" />
                <ValidationMessage For="() => WebSite.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">Image:</label>
                <InputText id="image" @bind-Value="WebSite.ImageUrl" class="form-control" />
                <ValidationMessage For="() => WebSite.ImageUrl" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="WebSite.Description" class="form-control" />
                <ValidationMessage For="() => WebSite.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="creationdate" class="form-label">CreationDate:</label>
                <InputDate id="creationdate" @bind-Value="WebSite.CreationDate" class="form-control" readonly />
                <ValidationMessage For="() => WebSite.CreationDate" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/websites">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public WebSite WebSite { get; set; } = new();

    public string UserId { get; set; }

     protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        this.UserId = user.Id;
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddWebSite()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        
        using var context = DbFactory.CreateDbContext();
        WebSite.UserId = user.Id;
        context.WebSites.Add(WebSite);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/websites");
    }
}