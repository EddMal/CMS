@page "/Visit"
@layout Layout.EmptyLayout
@attribute [AllowAnonymous]

@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject VisitorCounterService VisitorCounterService
@rendermode InteractiveServer



    @if (website is null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {
            <VisitorWebPagePreview WebPageId="@WebPageId" />
    }


<style>
    :root {
        --layout-background-color: @webPageBackgroundColor;
    }

    html, body {
        height: 100%; /* Ensure the body takes the full height of the viewport */
        margin: 0; /* Remove any default margin */
        padding: 0; /* Remove any default padding */
    }

    body {
        background-color: @webPageBackgroundColor;
    }

    .main .content {
        background-color: @webPageBackgroundColor;
        transition: background-color 0.3s ease; /* Optional: smooth color transition */
        margin: 0; /* Ensure no margin */
        padding: 0; /* Ensure no padding */
        width: 100%; /* Ensure content spans the full width */
        height: 100%; /* Ensure content spans the full height */
    }

</style>

@code {
    [SupplyParameterFromQuery]
    public int WebSiteId { get; set; }

    [SupplyParameterFromQuery]
    public int WebPageId { get; set; }

    public string webPageBackgroundColor { get; set; } = "white";

    private WebSite website;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        website = await context.WebSites
            .Include(w => w.WebPages)
            .FirstOrDefaultAsync(m => m.WebSiteId == WebSiteId);

        if (WebPageId == 0 && website != null)
        {
            var webpage = website.WebPages.FirstOrDefault();
            WebPageId = webpage.WebPageId;
            webPageBackgroundColor = webpage.BackgroundColor ?? "white";

        }

        if (website is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}


