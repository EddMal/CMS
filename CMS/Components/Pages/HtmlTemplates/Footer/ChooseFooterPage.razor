@page "/choose-footer"
@using Microsoft.AspNetCore.Components
@using System.Reflection
@using htmltemplates.Footer.footertemplates
@using htmltemplates.Footer.FooterInput
@rendermode InteractiveServer

<h3>Select Footer Template</h3>

<!-- Dropdown to choose a footer template -->
<select @onchange="OnFooterTemplateChanged">
    <option value="">Select Footer Template</option>
    @foreach (var template in footerTemplates)
    {
        <option value="@template">@template</option>
    }
</select>

<!-- Footer preview section -->
@if (!string.IsNullOrEmpty(selectedFooter))
{
    <h4>Footer Preview:</h4>

    @if (selectedFooterType != null)
    {
        <DynamicComponent Type="@selectedFooterType" Parameters="@(new Dictionary<string, object> { { "FooterTexts", footerTexts } })" />
    }
    else
    {
        <p>Error: Could not load footer template.</p>
    }

    <!-- Footer Input Section -->
    <h4>Footer Input:</h4>
    @if (selectedFooterInputType != null)
    {
        <DynamicComponent Type="@selectedFooterInputType" Parameters="@(new Dictionary<string, object> { { "InitialValues", footerTexts }, { "OnSubmit", EventCallback.Factory.Create<Dictionary<string, string>>(this, UpdateFooterTexts) } })" />
    }
    else
    {
        <p>Error: Could not load footer input form.</p>
    }
}

@code {
    private string? selectedFooter;
    private Type? selectedFooterType;
    private Type? selectedFooterInputType;
    private List<string> footerTemplates = new();
    private Dictionary<string, string> footerTexts = new();

    protected override void OnInitialized()
    {
        // Find all components in the footertemplates folder
        var assembly = Assembly.GetExecutingAssembly();
        var components = assembly.GetTypes()
            .Where(t => t.Namespace != null && t.Namespace.Contains("htmltemplates.Footer.footertemplates") && t.IsSubclassOf(typeof(ComponentBase)));

        // Add their names to the dropdown options
        footerTemplates = components.Select(c => c.Name).ToList();
    }

    private void OnFooterTemplateChanged(ChangeEventArgs e)
    {
        selectedFooter = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedFooter))
        {
            var assembly = Assembly.GetExecutingAssembly();

            // Get the Type of the selected footer template
            selectedFooterType = assembly.GetType($"htmltemplates.Footer.footertemplates.{selectedFooter}");

            // Get the corresponding input form type from the footer template's static property
            if (selectedFooterType != null)
            {
                var inputFormName = (string)selectedFooterType.GetProperty("InputForm")?.GetValue(null);
                selectedFooterInputType = assembly.GetType($"htmltemplates.Footer.FooterInput.{inputFormName}");

                // Initialize footer texts with default values from the template
                if (selectedFooterType.GetProperty("DefaultFooterTexts")?.GetValue(null) is Dictionary<string, string> defaultTexts)
                {
                    footerTexts = new Dictionary<string, string>(defaultTexts);
                }
                else
                {
                    footerTexts.Clear(); // Ensure it's empty if no default texts
                }
            }

            // Ensure types are resolved correctly
            if (selectedFooterType == null)
            {
                Console.WriteLine($"Error: Could not load template type for {selectedFooter}");
            }
            if (selectedFooterInputType == null)
            {
                Console.WriteLine($"Error: Could not load input type for {selectedFooter}");
            }
        }
    }

    private void UpdateFooterTexts(Dictionary<string, string> updatedTexts)
    {
        footerTexts = updatedTexts;
        StateHasChanged(); // Trigger UI update
    }
}
