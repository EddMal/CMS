@using CMS.Components.Pages.HtmlTemplates.templates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks

@namespace Templates.InputForm

<h3>Single Input Form</h3>

<div>
    <form>
        <div>
            <label>Content Name</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" />

            <label>Image URL</label>
            <input type="text" @bind="ImageInput1" placeholder="Enter Image URL" />

            <label>Card Title</label>
            <input type="text" @bind="CardTitle" placeholder="Enter Card Title" />

            <label>Card Text 1</label>
            <input type="text" @bind="CardText1" placeholder="Enter Card Text 1" />

            <label>Card Text 2</label>
            <input type="text" @bind="CardText2" placeholder="Enter Card Text 2" />
        </div>
@* 
        <div>
            <BackgroundColorSelector @bind-SelectedColor="Backgroundcolor" />
            <br>
            <TextColorSelector @bind-SelectedTextColor="Textcolor" />
        </div> *@

        <div style="margin-top: 10px;">
            <button type="button" @onclick="PreviewImage">PreviewImage</button>
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" @onclick="SaveToDatabase">Save To Database</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Content saved successfully!
            <a href="/contents?webpageid=@WebPageId" class="alert-link">Click here to view all contents.</a>

        </div>
    }
</div>

@code {
    [Inject] private IDbContextFactory<ApplicationDbContext> DbFactory { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter] public int TemplateId { get; set; }
    [Parameter] public int WebPageId { get; set; }

    [Parameter] public string ContentName { get; set; } = string.Empty;
    [Parameter] public string ImageInput1 { get; set; } = string.Empty;
    [Parameter] public string CardTitle { get; set; } = "CardTitle";
    [Parameter] public string CardText1 { get; set; } = "CardText1";
    [Parameter] public string CardText2 { get; set; } = "CardText2";
    [Parameter] public string Backgroundcolor { get; set; } = "grey";
    [Parameter] public string Textcolor { get; set; } = "black";
    [Parameter] public EventCallback<Dictionary<string, object>> OnSubmit { get; set; }

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    private async Task PreviewImage()
    {

        // Mapping section to pass form values to a parent component or handler
        var formValues = new Dictionary<string, object>
        {
            { "ContentName", ContentName },
            { "ImageInput1", ImageInput1 },
            { "CardTitle", CardTitle },
            { "CardText1", CardText1 },
            { "CardText2", CardText2 },
            { "Backgroundcolor", Backgroundcolor },
            { "Textcolor", Textcolor }
        };

        await OnSubmit.InvokeAsync(formValues);
    }

    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {
        await using var context = DbFactory.CreateDbContext();

        // Ensure WebPageId exists in the WebPages table
        var webPageExists = await context.WebPages.AnyAsync(wp => wp.WebPageId == WebPageId);
        if (!webPageExists)
        {
            throw new InvalidOperationException($"WebPageId {WebPageId} does not exist.");
        }

        var content = new Content
            {
                ContentName = ContentName,
                WebPageId = WebPageId,
                TextInputsJson = Newtonsoft.Json.JsonConvert.SerializeObject(new
                {
                    ImageInput1 = ImageInput1,
                    CardTitle = CardTitle,
                    CardText1 = CardText1,
                    CardText2 = CardText2,
                    Backgroundcolor = Backgroundcolor,
                    Textcolor = Textcolor,
                }),
                TemplateId = TemplateId
            };

        context.Contents.Add(content);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            // Log detailed information for debugging
            Console.WriteLine($"Error: {ex.InnerException?.Message}");
            throw;
        }

        saveSuccessful = true;
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
