@namespace Templates.InputForm
@using CMS.Components.Pages.HtmlTemplates.templates


<h3>Input Form</h3>

<div>
    <form @onsubmit="HandleSubmit">
        <div>
            <label>@LabelText1</label>
            <input type="text" @bind="inputValue1" />
        </div>
        <!-- Color Controls -->
        <label>Background Color:</label>
        <input type="color" @bind="Backgroundcolor" />

        <label>Text Color:</label>
        <input type="color" @bind="Textcolor" />

        <button type="submit">Submit</button>
    </form>
</div>

@code {
    [Parameter] public int TemplateId { get; set; } // Receive the TemplateId
    [Parameter] public int WebPageId { get; set; } // Receive WebPageId from parameters

    [Parameter] public string LabelText1 { get; set; } = "Enter First Text:";
    [Parameter] public string Backgroundcolor { get; set; } = "grey";
    [Parameter] public string Textcolor { get; set; } = "black"; // Add TextColor parameter
    [Parameter] public EventCallback<Dictionary<string, object>> OnSubmit { get; set; }

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    // protected override void OnParametersSet()
    // {
    //     if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
    //     {
    //         SaveToDatabase(); // Call the save method
    //         hasSaved = true; // Set the flag to prevent further saves
    //     }
    // }

    private string inputValue1 = string.Empty;
    private string inputValue2 = string.Empty;



    private async Task HandleSubmit()
    {
        var formValues = new Dictionary<string, object>
        {
            { "TextInput1", inputValue1 },
            { "Backgroundcolor", Backgroundcolor },
            { "Textcolor", Textcolor } // Include Textcolor in form submission
        };

        await OnSubmit.InvokeAsync(formValues);
    }
}

