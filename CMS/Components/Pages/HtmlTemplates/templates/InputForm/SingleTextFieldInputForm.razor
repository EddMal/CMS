@using CMS.Components.Pages.HtmlTemplates.templates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks

@rendermode InteractiveServer

@namespace Templates.InputForm
<h3>Markdown Input Form</h3>

<div>
    <form>
        <div>
            <label>Content Name</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" class="form-control" />

            <!-- Markdown Text Editor -->
            <label>Markdown Content:</label>
            <MarkdownEditor @bind-Value="MarkdownContent" SpellChecker="false">
                <Toolbar>
                    <MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" Title="Bold" />
                    <MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" Title="Italic" />
                    <MarkdownToolbarButton Action="MarkdownAction.Code" Icon="fa fa-code" Title="Code" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading" Icon="fa fa-header" Title="Heading" />
                    <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" Icon="fa fa-list-ul" Title="Unordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Icon="fa fa-list-ol" Title="Ordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.Table" Icon="fa fa-list-ol" Title="Ordered List" />

                </Toolbar>
            </MarkdownEditor>
        </div>

        <div style="margin-top: 10px;">
            <button type="button" @onclick="SaveToDatabase">Save To Database</button>
        </div>
    </form>
</div>

@code {
    [Inject] private IDbContextFactory<ApplicationDbContext> DbFactory { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter] public int TemplateId { get; set; }
    [Parameter] public int WebPageId { get; set; }

    [Parameter] public string ContentName { get; set; } = string.Empty;
    [Parameter] public string MarkdownContent { get; set; } = string.Empty;

    [Parameter] public EventCallback<Dictionary<string, object>> OnSubmit { get; set; }

    private string PreviewContent { get; set; } = string.Empty;

    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {
        await using var context = DbFactory.CreateDbContext();

        // Ensure WebPageId exists in the WebPages table
        var webPageExists = await context.WebPages.AnyAsync(wp => wp.WebPageId == WebPageId);
        if (!webPageExists)
        {
            throw new InvalidOperationException($"WebPageId {WebPageId} does not exist.");
        }

        // Save the markdown content as JSON
        var content = new Content
            {
                ContentName = ContentName,
                WebPageId = WebPageId,
                TextInputsJson = Newtonsoft.Json.JsonConvert.SerializeObject(new
                {
                    MarkdownContent = MarkdownContent
                }),
                TemplateId = TemplateId
            };

        context.Contents.Add(content);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            // Log detailed information for debugging
            Console.WriteLine($"Error: {ex.InnerException?.Message}");
            throw;
        }

        // Navigate to the contents page after saving
        Done();
    }

    // Convert Markdown to HTML (for preview)
    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdig.Markdown.ToHtml(markdown); // Using Markdig for Markdown to HTML conversion
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
