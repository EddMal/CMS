@using CMS.Components.Pages.HtmlTemplates.templates
@using CMS.Data;
@using CMS.Entities;
@using Microsoft.AspNetCore.Components;
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks;

@namespace Templates.InputForm

<div>
@*  Patrik, för att förklara lite hur jag gick tillväga för att ha ett input field för samtliga: inputValue, inputValue1 och inputValue2.
    Gjorde en loop (kan vara switch case med) som håller reda på vilken av de tre ovan som är den aktuella för inputen vid ett givet tillfälle.
    Anledningen var att det är ser mer cleant ut att ha endast ett fält med tillhörande knapp än att alltid visa flera fält varav ett alltid är tomt.
    GetPlaceholderText() lade jag till så det inte gav intrycket att man måste ha två olika textinputs, ingen aning om det är något du vill behålla.
    Done() är en knapp med tillhörade funtion som tar användare till "/content". Mer info längre ned i texten.
    Jag tror inte jag ändrade så mycket mer, eventuellt till async Task i någon fil men nu börjar jag snart blanda ihop allt själv (din kod).
    Så det är endast denna filen som är totalt ändrad. Men nu sparar den korrekt i Db, och preview fungerar.
    /Jens
*@

    <nav class="navbar navbar-expand-lg navbar-light bg-light" style="font-size:20px;">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbaris" aria-controls="navbaris" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbaris">
            <ul class="navbar-nav mr-auto">

                @foreach (var item in AddMenyItems)
                {
                    
                    <li class="nav-item">
                        <NavLink class="nav-link" href="" @onclick="@Edit">
                            @item.Value
                        </NavLink>
                    </li>
                }
                @*  <li class="nav-item">
                <NavLink class="nav-link" href="@TextInput2">
                @TextInput1
                </NavLink>

                </li>
                <li class="nav-item">
                <NavLink class="nav-link" href="@TextInput4">
                @TextInput3
                </NavLink>
                </li>

                <li class="nav-item">
                <NavLink class="nav-link" href="@TextInput6">
                @TextInput5
                </NavLink>
                </li>

                <li class="nav-item">
                <NavLink class="nav-link" href="@TextInput8">
                @TextInput7
                </NavLink>
                </li>
                <li class="nav-item">
                <NavLink class="nav-link" href="@TextInput9">
                @TextInput9
                </NavLink>
                </li> *@
            </ul>
        </div>
    </nav>

    <div>
    @{if (currentStep == InputStep.ContentNameInput)
    {
        <form>
            
                    <label for="meny">Meny namn:</label>
                    <input type="text" @bind="inputValue" placeholder="" />
                    <button type="button" @onclick="AddMenuName">Lägg till</button>
           
        </form>
    }
        else if ((currentStep == InputStep.AddItem))
    {
            

        
                <label for="title">Menyval nam:</label>

                <input type="text" @bind="inputValue" placeholder="Menyval nam" />

                    <select id="templateDropdown" @bind="templateDropdown">
                    <option value="">-- Välj Sida --</option>
                    @if (webpages != null)
                    {
                        @foreach (var item in MenyItems)
                        {
                            <option value="@item.Key">@item.Key</option>
                        }
                    }
                </select>
                <button type="button" @onclick="AddItem">Lägg till</button>
            
        }
        else if ((currentStep == InputStep.Wait))
        {
                <button type="button" @onclick="NewItem">Lägg till menyval</button>
        }
        else if ((currentStep == InputStep.Edit))
        {
                
        }

        @* <div>
            <label>@currentLabelText</label>
            <input type="text" @bind="inputValue" placeholder="" />
            <button type="button" @onclick="HandleSubmit">Edit</button>
        </div> *@
    

    }

    
    <div>
        <BackgroundColorSelector @bind-SelectedColor="Backgroundcolor" />
        
        <TextColorSelector @bind-SelectedTextColor="Textcolor" />
    </div>
    </div>

    <div style="margin-top: 10px;">
        <button type="button" @onclick="Done">Spara meny</button>
@*  Eftersom vi nu (enligt Mikael borde) sparar direkt i Db när ett textfält läggs till så tog jag bort min Cancel kod nedan.
    Det vi kan göra är att ladda templaten och sparar över det man redan tryck igenom om man trycker på cancel, eftersom koden blir nu automatiskt sparad direkt man trycker på Add (vilket sker efter varje textinput).
    Jag påbörjade men slutade och rullade tillbaka försök att få rullningsmenyn över färger att automatiskt uppdateras dynamiskt så som input av texter fungerar.
    Det blev för bökigt och det är redan rörigt i mitt huvud eftersom det är kod jag inte skapat från början :)
    
    <span style="margin-left: 10px;"></span>
    <button type="button" @onclick="CancelTemplate">Cancel</button> *@
    </div>
</div>


