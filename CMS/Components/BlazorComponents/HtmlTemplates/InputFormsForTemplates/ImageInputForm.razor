@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks
@using Newtonsoft.Json

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService 
@inherits BaseImageTemplate //gets the base parameters we have in every template/inputform

<h3>Single Image Input Form</h3>

<div>
    <form>
        <div>
            <label>Content Name</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" />

            <label>Image URL</label>
            <input type="text" @bind="ImageInput" placeholder="Enter Image URL" />

            <!-- Image Size Controls -->
            <label>Image Width (px or %):</label>
            <input type="text" @bind="ImageWidth" placeholder="e.g., 100% or 500px" />

            <label>Image Height (px or %):</label>
            <input type="text" @bind="ImageHeight" placeholder="e.g., auto or 300px" />

            <!-- Image Border Controls -->
            <label>Border Width (px):</label>
            <input type="number" @bind="BorderWidth" placeholder="Enter border width" />

            <label>Border Color:</label>
            <input type="color" @bind="BorderColor" />

            <label>Border Radius (px):</label>
            <input type="number" @bind="BorderRadius" placeholder="Enter border radius" />

            <!-- Image Shadow Controls -->
            <label>Box Shadow (CSS format):</label>
            <input type="text" @bind="BoxShadow" placeholder="e.g., 0 4px 8px rgba(0, 0, 0, 0.2)" />

            <!-- Background Color Controls -->
            <label>Background Color:</label>
            <input type="color" @bind="BackgroundColor" />

            <!-- Image Alignment Controls -->
            <label>Image Alignment:</label>
            <select @bind="ImageAlignment">
                <option value="left">Left</option>
                <option value="center">Center</option>
                <option value="right">Right</option>
            </select>
        </div>

        <div style="margin-top: 10px;">
            <button type="button" @onclick="PreviewImage">PreviewImage</button>
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" @onclick="SaveToDatabase">Save To Database</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Content saved successfully!
            <a href="/contents?webpageid=@WebPageId" class="alert-link">Click here to view all contents.</a>

        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter
    private bool saveSuccessful = false;  // New flag to show the success message

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load content only if ContentId exists (edit mode)
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
            PreviewImage();
        }
    }

    // A class representing the structure of the JSON data stored in the database
    private class ContentData
    {
        public string ImageInput = string.Empty;
        public string ImageWidth = string.Empty;
        public string ImageHeight = string.Empty;
        public decimal BorderWidth  = 0;
        public string BorderColor  = string.Empty;
        public decimal BorderRadius  = 0;
        public string BoxShadow = string.Empty;
        public string BackgroundColor = string.Empty;
        //public string TextColor = string.Empty;
        public string ImageAlignment = string.Empty;
    }


    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId);

        if (existingContent != null)
        {
            // Pre-fill form fields with existing content data
            ContentName = existingContent.ContentName;

            // Deserialize the ContentJson field to extract additional form data
            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);

                ImageInput = contentData.ImageInput;
                ImageWidth = contentData.ImageWidth;
                ImageHeight = contentData.ImageHeight;
                BorderWidth = contentData.BorderWidth;
                BorderColor = contentData.BorderColor;
                BorderRadius = contentData.BorderRadius;
                BoxShadow = contentData.BoxShadow;
                BackgroundColor = contentData.BackgroundColor;
                ImageAlignment = contentData.ImageAlignment;
            }
        }
    }

    // Save all inputs to the database when the "Save" button is clicked
    private async Task PreviewImage()
    {

        // Mapping section to pass form values to a parent component or handler
        var formValues = new Dictionary<string, object>
        {
            { "ContentName", ContentName },
            { "ImageInput", ImageInput },
            { "ImageWidth", ImageWidth },
            { "ImageHeight", ImageHeight },
            { "BorderWidth", BorderWidth },
            { "BorderColor", BorderColor },
            { "BorderRadius", BorderRadius },
            { "BoxShadow", BoxShadow },
            { "BackgroundColor", BackgroundColor },
            { "ImageAlignment", ImageAlignment }
        };

        await OnSubmit.InvokeAsync(formValues);
        
    }

    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        var contentData = new ContentData
            {
                ImageInput = ImageInput,
                ImageWidth = ImageWidth,
                ImageHeight = ImageHeight,
                BorderWidth = BorderWidth,
                BorderColor = BorderColor,
                BorderRadius = BorderRadius,
                BoxShadow = BoxShadow,
                BackgroundColor = BackgroundColor,
                ImageAlignment = ImageAlignment
            };

        var content = new Content
            {
                UserId = user.Id,
                ContentName = ContentName,
                WebPageId = WebPageId,
                CreationDate = DateOnly.FromDateTime(DateTime.Now),
                LastUpdated = DateOnly.FromDateTime(DateTime.Now),
                ContentJson = JsonConvert.SerializeObject(contentData),
                TemplateId = TemplateId
            };

        // Save or update content based on ContentId presence
        if (ContentId.HasValue)
        {
            content.ContentId = ContentId.Value;
            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            await ContentService.SaveContentAsync(content);
        }

        saveSuccessful = true;
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
