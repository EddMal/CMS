@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates

<h3>Single Video Input Form</h3>

<div>
    <form>
        <div>
            <label>Content Name</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" />

            <!-- Video URL Input -->
            <label>Video URL</label>
            <input type="text" @bind="VideoUrl" placeholder="Enter Video URL" />

            <!-- Video Size Controls -->
            <label>Video Width (px or %):</label>
            <input type="text" @bind="VideoWidth" placeholder="e.g., 100% or 500px" />

            <label>Video Height (px or %):</label>
            <input type="text" @bind="VideoHeight" placeholder="e.g., auto or 300px" />

            <!-- Video Alignment Controls -->
            <label>Video Alignment:</label>
            <select @bind="VideoAlignment">
                <option value="left">Left</option>
                <option value="center">Center</option>
                <option value="right">Right</option>
            </select>

        </div>


        <div style="margin-top: 10px;">
            <button type="button" @onclick="PreviewImage">PreviewImage</button>
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" @onclick="SaveToDatabase">Save To Database</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Content saved successfully!
            <a href="/contents?webpageid=@WebPageId" class="alert-link">Click here to view all contents.</a>
        </div>
    }
</div>

@code {
    [Inject] private IDbContextFactory<ApplicationDbContext> DbFactory { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter] public int TemplateId { get; set; }
    [Parameter] public int WebPageId { get; set; }

    [Parameter] public string ContentName { get; set; } = string.Empty;
    [Parameter] public EventCallback<Dictionary<string, object>> OnSubmit { get; set; }

    // Video Properties
    [Parameter] public string VideoUrl { get; set; } = string.Empty;
    [Parameter] public string VideoWidth { get; set; } = "100%";  // Use meaningful default values
    [Parameter] public string VideoHeight { get; set; } = "315px"; // You can adjust height accordingly
    [Parameter] public string VideoAlignment { get; set; } = "center";

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }


    // Save all inputs to the database when the "Save" button is clicked
    private async Task PreviewImage()
    {

        // Mapping section to pass form values to a parent component or handler
        var formValues = new Dictionary<string, object>
        {
            { "VideoUrl", VideoUrl },
            { "VideoWidth", VideoWidth },
            { "VideoHeight", VideoHeight },
            { "VideoAlignment", VideoAlignment },
        };

        await OnSubmit.InvokeAsync(formValues);

        // Navigate to the contents page
        //Done();
    }

    // Save all inputs to the database when the "Save" button is clicked
    private async Task SaveToDatabase()
    {
        await using var context = DbFactory.CreateDbContext();

        // Ensure WebPageId exists in the WebPages table
        var webPageExists = await context.WebPages.AnyAsync(wp => wp.WebPageId == WebPageId);
        if (!webPageExists)
        {
            throw new InvalidOperationException($"WebPageId {WebPageId} does not exist.");
        }

        var content = new Content
            {
                ContentName = ContentName,
                WebPageId = WebPageId,
                TextInputsJson = Newtonsoft.Json.JsonConvert.SerializeObject(new
                {
                    VideoUrl = VideoUrl,
                    VideoWidth = VideoWidth,
                    VideoHeight = VideoHeight,
                    VideoAlignment = VideoAlignment
                }),
                TemplateId = TemplateId
            };

        context.Contents.Add(content);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            // Log detailed information for debugging
            Console.WriteLine($"Error: {ex.InnerException?.Message}");
            throw;
        }

        saveSuccessful = true;
    }

    // Navigate to the contents page after saving
    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
