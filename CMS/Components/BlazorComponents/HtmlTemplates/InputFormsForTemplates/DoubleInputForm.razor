@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data;
@using CMS.Entities;
@using Microsoft.AspNetCore.Components;
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks;
@using Newtonsoft.Json

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService
@inherits BaseHeaderTemplate //gets the base parameters we have in every template/inputform
<h4></h4>

<div>
    <form>
            <div>
                <div class="form-row">
                    <label style="margin-right: 0px;">Innehållets namn:</label>
                    <input type="text" @bind="ContentName" />
                </div>

                <div class="form-row">
                    <label style="margin-right: 59px;">Textfält 1:</label>
                    <input type="text" @bind="TextInput1" />

                </div>

            <div class="form-row text-2-form-row">
                <label style="margin-right: 64px;" >Textfält 2:</label>
                    <textarea @bind="TextInput2" class="text-input" rows="4" style="resize: vertical;"></textarea>
                </div>

                
               @*  <p class ="instruction-text"> Instruktioner för textfält 2</p>      
                    
                    <p class="instruction-text"> Exempel: Text1,Text2,..</p>
                    <p class="instruction-text"> - Lägg till Länkar skriv "=" mellan länkttitel och URL, se nedan</p>
                    <p class="instruction-text"> Exempel: Länkrubrik1=https://github.com,Länkrubrik1="URL-för-länk-2",..</p>
                    <p class="instruction-text"> - Blanda Länkar och text:</p>
                    <p class="instruction-text"> Exempel: Länkrubrik1=https://github.com,Text ,Länkrubrik1="URL-för-länk-2",..</p>
                    <p class="instruction-text"> -Kommatecken radbryter.</p>
                </div> *@

                <p class="instruction-text">Instruktioner för textfält 2</p>
                <p class="instruction-text">";;" radbryter och krävs för att urskilja/separera länkar.</p>
                
                <div class="checkbox-group">
                    <input type="checkbox" id="toggle-instructions1" class="toggle-checkbox" />
                    <label class="instruction-text" for="toggle-instructions1">
                    <span class="arrow">≡ Text med radbrytning</span> <!-- Arrow icon -->
                    <span class="tooltip">Exempel</span> <!-- Tooltip text -->
                    </label>
                    <div class="toggle-content">
                        <p class="instruction-text">Exempel Lägg till text med radbrytning:</p>
                    <p class="instruction-text">- Text1;;Text2;;..</p>
                    </div>

                    <input type="checkbox" id="toggle-instructions2" class="toggle-checkbox" />
                    <label class="instruction-text" for="toggle-instructions2">
                    <span class="arrow">≡ Infoga länkar</span> <!-- Arrow icon -->
                    <span class="tooltip">Exempel</span> <!-- Tooltip text -->
                    </label>
                    <div class="toggle-content">
                        <p class="instruction-text">Exempel länkar, använd "=" mellan länktitel och URL:</p>
                    <p class="instruction-text">Länkrubrik1=https://github.com;;Länkrubrik1="URL-för-länk-2";;..</p>
                    </div>

                    <input type="checkbox" id="toggle-instructions3" class="toggle-checkbox" />
                    <label class="instruction-text" for="toggle-instructions3">
                    <span class="arrow">≡ Blanda länkar och text.</span> <!-- Arrow icon -->
                    <span class="tooltip">Exempel</span> <!-- Tooltip text -->
                    </label>
                    <div class="toggle-content">
                        <p class="instruction-text">Exempel för att blanda länkar och text:</p>
                    <p class="instruction-text">Text1;; Länkrubrik1="URL-för-länk-2";;..</p>
                    </div>
                </div>




        




               

                <div class="form-row">
                    <label>Bakgrundsfärg:</label>
                <br>
                    <input type="color" @bind="BackgroundColor" />
                </div>

                <div class="form-row">
                    <label>Textfärg:</label>
                    <br>
                    <input type="color" @bind="TextColor" />
                </div>
            </div>

            <div style="margin-top: 10px;">
                <button class="btn btn-outline-info" style=" margin-right:5px; " type="button" @onclick="PreviewImage">PreviewImage</button>
                    @if (!MultiPageMode) // Show button only if not in multi-page mode
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="SaveToDatabase">Spara</button>
                    }
            </div>
    </form>
<div/>
    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
             Innehåll sparat.

        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter
    private bool saveSuccessful = false;  // New flag to show the success message

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // currentLabelText = LabelText1;
        // Load content only if ContentId exists (edit mode)
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
            PreviewImage();
        }
    }

    // A class representing the structure of the JSON data stored in the database
    private class ContentData
    {
        public string ContentName = string.Empty;
        public string TextInput1 = string.Empty;
        public string TextInput2 = string.Empty;
        public string BackgroundColor = string.Empty;
        public string TextColor = string.Empty;
    }

    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId); ;

        if (existingContent != null)
        {
            // Pre-fill form fields with existing content data
            ContentName = existingContent.ContentName;

            // Deserialize the ContentJson field to extract additional form data
            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);

                TextInput1 = contentData.TextInput1;
                TextInput2 = contentData.TextInput2;
                BackgroundColor = contentData.BackgroundColor;
                TextColor = contentData.TextColor;
            }
        }
    }

    private async Task SaveToDatabase()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();

        var contentData = new ContentData
            {
                TextInput1 = TextInput1,
                TextInput2 = TextInput2,
                BackgroundColor = BackgroundColor,
                TextColor = TextColor,
            };

        var content = new Content
            {
                UserId = user.Id,
                ContentName = ContentName,
                WebPageId = WebPageId,
                CreationDate = DateOnly.FromDateTime(DateTime.Now),
                LastUpdated = DateOnly.FromDateTime(DateTime.Now),
                ContentJson = JsonConvert.SerializeObject(contentData),
                TemplateId = TemplateId
            };


        // Save or update content based on ContentId presence
        if (ContentId.HasValue)
        {
            content.ContentId = ContentId.Value;
            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            await ContentService.SaveContentAsync(content);
        }

        saveSuccessful = true;

    }

    private async Task PreviewImage()
    {

        // Mapping section to pass form values to a parent component or handler
        // mapping del så inputs hamnar där de ska
        var formValues = new Dictionary<string, object>
        {
            { "ContentName", ContentName },
            { "TextInput1", TextInput1 },
            { "TextInput2", TextInput2 },
            { "BackgroundColor", BackgroundColor },
            { "TextColor", TextColor }

        };

        await OnSubmit.InvokeAsync(formValues);

    }

    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
