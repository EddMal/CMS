@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks

@rendermode InteractiveServer

@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates

@inject IJSRuntime JSRuntime

<h3>Quill Input Form</h3>

<div>
    <form>
        <div>
            <label>Content Name</label>
            <input type="text" @bind="ContentName" placeholder="Enter name for content" class="form-control" />

            <!-- Quill editor placeholder -->
            <div id="toolbar-container">
                <span class="ql-formats">
                    <select class="ql-font"></select>
                    <select class="ql-size"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-script" value="sub"></button>
                    <button class="ql-script" value="super"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-header" value="1"></button>
                    <button class="ql-header" value="2"></button>
                    <button class="ql-blockquote"></button>
                    <button class="ql-code-block"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-direction" value="rtl"></button>
                    <select class="ql-align"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </div>
            <div id="quill-editor" style="height: 200px; background-color: white;"></div>

        </div>

        <div style="margin-top: 10px;">
            @if (!MultiPageMode) // Show button only if not in multi-page mode
            {
                <button type="button" @onclick="SaveToDatabase">Save To Database</button>
            }
        </div>
    </form>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Content saved successfully!
            <a href="/contents?webpageid=@WebPageId" class="alert-link">Click here to view all contents.</a>
        </div>
    }
</div>

@code {
    [Inject] private IDbContextFactory<ApplicationDbContext> DbFactory { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter] public int TemplateId { get; set; }
    [Parameter] public int WebPageId { get; set; }

    [Parameter] public string ContentName { get; set; } = string.Empty;
    [Parameter] public string QuillContent { get; set; } = string.Empty;

    [Parameter] public EventCallback<Dictionary<string, object>> OnSubmit { get; set; }

    private bool hasSaved = false; // Flag to track if save has been executed
    [Parameter] public bool SaveBtnClicked { get; set; } // New parameter to handle save button state
    [Parameter] public bool MultiPageMode { get; set; } // Receive MultiPageMode parameter

    private bool saveSuccessful = false;  // New flag to show the success message

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Quill editor using JavaScript after the page is rendered
            await JSRuntime.InvokeVoidAsync("initializeQuillEditor");
        }
    }

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved) // Check if SaveBtnClicked and save hasn't been executed yet
        {
            SaveToDatabase(); // Call the save method
            hasSaved = true; // Set the flag to prevent further saves
        }
    }

    private async Task SaveToDatabase()
    {
        // Get Quill content via JSInterop before saving
        QuillContent = await JSRuntime.InvokeAsync<string>("getQuillContent");

        await using var context = DbFactory.CreateDbContext();

        var webPageExists = await context.WebPages.AnyAsync(wp => wp.WebPageId == WebPageId);
        if (!webPageExists)
        {
            throw new InvalidOperationException($"WebPageId {WebPageId} does not exist.");
        }

        var content = new Content
            {
                ContentName = ContentName,
                WebPageId = WebPageId,
                TextInputsJson = Newtonsoft.Json.JsonConvert.SerializeObject(new
                {
                    QuillContent = QuillContent
                }),
                TemplateId = TemplateId
            };

        context.Contents.Add(content);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Error: {ex.InnerException?.Message}");
            throw;
        }

        saveSuccessful = true;
    }
}
